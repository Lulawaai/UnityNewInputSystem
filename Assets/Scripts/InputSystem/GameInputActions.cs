//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/InputSystem/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMoves"",
            ""id"": ""3e2dc640-9574-489e-889e-fc1c72b6217d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""66e4ae4a-615f-48a5-8ca5-2bfe95bd525c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DroneSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""2b0f3567-c019-4967-ae89-b3e30d99ccd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d46b4493-50af-4194-a9ab-19ef13e8f11f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c29b6167-5067-465e-82c8-48c6f3fba122"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e665d8fe-905b-430a-afec-3d522982f9df"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""be7da646-b24b-4667-8193-2b9547de4b42"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3010dd31-2fd0-465b-a953-c9402e2dae05"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6bbac370-fd07-499e-b1d7-45bf0a461f24"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""45b36965-ff30-4643-9083-5ff36ae74d82"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7ad19c3f-0f9c-4adf-8c6f-038f338e3536"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8a8e308c-b50a-438f-ab78-b3d744905bd3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""68544d7a-8900-46c9-ba10-7c758ef7ad46"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f10d7dcc-bd2e-494f-a1ea-1a3d38b38dd2"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bbfd12d-7d34-4076-a0bd-0b05ecb7babe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DroneSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4915aa4c-589e-40ff-b23c-e117ff73d790"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DroneSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Drone"",
            ""id"": ""2b6d5cc5-bed7-4131-ade8-36dd0c75b635"",
            ""actions"": [
                {
                    ""name"": ""Moves"",
                    ""type"": ""Value"",
                    ""id"": ""04113d4c-feb2-4361-b7f7-30346d14dec1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""bb765f53-5cf3-4bbf-a5e0-f450120f8f0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForkliftSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""48010889-28a6-47a1-8e83-9cc656681ddb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f7f5e183-fdc3-4550-8045-921d42d8c87c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84f5d8cd-db98-440d-b877-983464d18249"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc9daa0c-1695-4501-be22-89399eff26a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""33419516-deb0-4cf5-8806-743c70421077"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6560ca8f-ba54-4d03-8c17-cb505b955400"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""8e8e17da-6dc9-4dcb-8b9c-3dd7537b0ff2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7365a043-f71e-4765-9f59-3c4738d630f2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""66a60646-a7a9-4f8f-8690-7972d341f773"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b93ca0ec-5c40-45a1-8961-e14be7cfe96d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f73920ed-55d8-4830-b2d6-eadf90ec7da5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d5a4e59b-db00-4d7f-9228-189c166c823d"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14b3263a-1392-4098-a8f4-b8eb7a455e48"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be97d0a5-6d17-4398-92e9-dc47c5ddd98f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a024d68-dbdc-44e1-8d5e-9fab5aa56b55"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkliftSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5b209df-e721-4702-a465-00e75886c16d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkliftSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""7815853c-d47e-4a2a-9f2d-c8ca92666668"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5ca418fb-1fbb-463a-a4aa-3ac1469bd26e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""e57d312d-9129-4835-8560-5415fa7f9e30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3928ff9c-ef8d-4cea-9733-134f18f5b94e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bfb7e211-27a1-4747-b9fe-828c1e28b75e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""86a211e0-4b5b-4db1-bcab-69cc4345d9a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a33132b3-991c-47cf-b829-4a40709f7834"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""04555a6b-3274-4261-9ff3-a845132f3325"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""1412eae1-647f-4e98-8a5b-05c36ea0bc97"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b44215a-a110-4a0a-a425-9f1ac3cbf04c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7e0367b-3e00-4fa4-b484-6645954090a3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eccddbab-4cbf-4335-a0dc-2a95f8642b91"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""96e824eb-f160-4845-ac61-fe56341804b9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33991c19-4d9c-46e2-b832-25ebe7de4d97"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a53cbe7-6952-477d-acc8-3c6e32eb5a69"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9e8174a-afac-444d-8c85-1bb6f7355864"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crate"",
            ""id"": ""02133e65-75c0-4691-b56a-a192bdcedf1d"",
            ""actions"": [
                {
                    ""name"": ""Explode"",
                    ""type"": ""Button"",
                    ""id"": ""a52c9b84-1184-481b-95aa-48efe972e0d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap,Hold(duration=10)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ff02e647-6a49-44c0-908c-f3edf611fea0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b3b09de-cb6a-4778-88f9-f0d66982be92"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""2b8b3df0-ecfd-4cee-928e-3e9b415bed96"",
            ""actions"": [
                {
                    ""name"": ""ReloadGame"",
                    ""type"": ""Button"",
                    ""id"": ""5ad10fbb-33b3-4085-8171-cae8ae5bdd68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""044a372d-18c7-44f0-9b2d-115493e590e1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMoves
        m_PlayerMoves = asset.FindActionMap("PlayerMoves", throwIfNotFound: true);
        m_PlayerMoves_Move = m_PlayerMoves.FindAction("Move", throwIfNotFound: true);
        m_PlayerMoves_DroneSwitch = m_PlayerMoves.FindAction("DroneSwitch", throwIfNotFound: true);
        // Drone
        m_Drone = asset.FindActionMap("Drone", throwIfNotFound: true);
        m_Drone_Moves = m_Drone.FindAction("Moves", throwIfNotFound: true);
        m_Drone_Thrust = m_Drone.FindAction("Thrust", throwIfNotFound: true);
        m_Drone_ForkliftSwitch = m_Drone.FindAction("ForkliftSwitch", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_Move = m_Forklift.FindAction("Move", throwIfNotFound: true);
        m_Forklift_PlayerSwitch = m_Forklift.FindAction("PlayerSwitch", throwIfNotFound: true);
        // Crate
        m_Crate = asset.FindActionMap("Crate", throwIfNotFound: true);
        m_Crate_Explode = m_Crate.FindAction("Explode", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_ReloadGame = m_General.FindAction("ReloadGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMoves
    private readonly InputActionMap m_PlayerMoves;
    private IPlayerMovesActions m_PlayerMovesActionsCallbackInterface;
    private readonly InputAction m_PlayerMoves_Move;
    private readonly InputAction m_PlayerMoves_DroneSwitch;
    public struct PlayerMovesActions
    {
        private @GameInputActions m_Wrapper;
        public PlayerMovesActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMoves_Move;
        public InputAction @DroneSwitch => m_Wrapper.m_PlayerMoves_DroneSwitch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMoves; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovesActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovesActions instance)
        {
            if (m_Wrapper.m_PlayerMovesActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnMove;
                @DroneSwitch.started -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnDroneSwitch;
                @DroneSwitch.performed -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnDroneSwitch;
                @DroneSwitch.canceled -= m_Wrapper.m_PlayerMovesActionsCallbackInterface.OnDroneSwitch;
            }
            m_Wrapper.m_PlayerMovesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @DroneSwitch.started += instance.OnDroneSwitch;
                @DroneSwitch.performed += instance.OnDroneSwitch;
                @DroneSwitch.canceled += instance.OnDroneSwitch;
            }
        }
    }
    public PlayerMovesActions @PlayerMoves => new PlayerMovesActions(this);

    // Drone
    private readonly InputActionMap m_Drone;
    private IDroneActions m_DroneActionsCallbackInterface;
    private readonly InputAction m_Drone_Moves;
    private readonly InputAction m_Drone_Thrust;
    private readonly InputAction m_Drone_ForkliftSwitch;
    public struct DroneActions
    {
        private @GameInputActions m_Wrapper;
        public DroneActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moves => m_Wrapper.m_Drone_Moves;
        public InputAction @Thrust => m_Wrapper.m_Drone_Thrust;
        public InputAction @ForkliftSwitch => m_Wrapper.m_Drone_ForkliftSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterface != null)
            {
                @Moves.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoves;
                @Moves.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoves;
                @Moves.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnMoves;
                @Thrust.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnThrust;
                @ForkliftSwitch.started -= m_Wrapper.m_DroneActionsCallbackInterface.OnForkliftSwitch;
                @ForkliftSwitch.performed -= m_Wrapper.m_DroneActionsCallbackInterface.OnForkliftSwitch;
                @ForkliftSwitch.canceled -= m_Wrapper.m_DroneActionsCallbackInterface.OnForkliftSwitch;
            }
            m_Wrapper.m_DroneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moves.started += instance.OnMoves;
                @Moves.performed += instance.OnMoves;
                @Moves.canceled += instance.OnMoves;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @ForkliftSwitch.started += instance.OnForkliftSwitch;
                @ForkliftSwitch.performed += instance.OnForkliftSwitch;
                @ForkliftSwitch.canceled += instance.OnForkliftSwitch;
            }
        }
    }
    public DroneActions @Drone => new DroneActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private IForkliftActions m_ForkliftActionsCallbackInterface;
    private readonly InputAction m_Forklift_Move;
    private readonly InputAction m_Forklift_PlayerSwitch;
    public struct ForkliftActions
    {
        private @GameInputActions m_Wrapper;
        public ForkliftActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Forklift_Move;
        public InputAction @PlayerSwitch => m_Wrapper.m_Forklift_PlayerSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void SetCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnMove;
                @PlayerSwitch.started -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnPlayerSwitch;
                @PlayerSwitch.performed -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnPlayerSwitch;
                @PlayerSwitch.canceled -= m_Wrapper.m_ForkliftActionsCallbackInterface.OnPlayerSwitch;
            }
            m_Wrapper.m_ForkliftActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PlayerSwitch.started += instance.OnPlayerSwitch;
                @PlayerSwitch.performed += instance.OnPlayerSwitch;
                @PlayerSwitch.canceled += instance.OnPlayerSwitch;
            }
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);

    // Crate
    private readonly InputActionMap m_Crate;
    private ICrateActions m_CrateActionsCallbackInterface;
    private readonly InputAction m_Crate_Explode;
    public struct CrateActions
    {
        private @GameInputActions m_Wrapper;
        public CrateActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Explode => m_Wrapper.m_Crate_Explode;
        public InputActionMap Get() { return m_Wrapper.m_Crate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrateActions set) { return set.Get(); }
        public void SetCallbacks(ICrateActions instance)
        {
            if (m_Wrapper.m_CrateActionsCallbackInterface != null)
            {
                @Explode.started -= m_Wrapper.m_CrateActionsCallbackInterface.OnExplode;
                @Explode.performed -= m_Wrapper.m_CrateActionsCallbackInterface.OnExplode;
                @Explode.canceled -= m_Wrapper.m_CrateActionsCallbackInterface.OnExplode;
            }
            m_Wrapper.m_CrateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Explode.started += instance.OnExplode;
                @Explode.performed += instance.OnExplode;
                @Explode.canceled += instance.OnExplode;
            }
        }
    }
    public CrateActions @Crate => new CrateActions(this);

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_ReloadGame;
    public struct GeneralActions
    {
        private @GameInputActions m_Wrapper;
        public GeneralActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReloadGame => m_Wrapper.m_General_ReloadGame;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @ReloadGame.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReloadGame;
                @ReloadGame.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReloadGame;
                @ReloadGame.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReloadGame;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ReloadGame.started += instance.OnReloadGame;
                @ReloadGame.performed += instance.OnReloadGame;
                @ReloadGame.canceled += instance.OnReloadGame;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);
    public interface IPlayerMovesActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDroneSwitch(InputAction.CallbackContext context);
    }
    public interface IDroneActions
    {
        void OnMoves(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnForkliftSwitch(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPlayerSwitch(InputAction.CallbackContext context);
    }
    public interface ICrateActions
    {
        void OnExplode(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnReloadGame(InputAction.CallbackContext context);
    }
}
